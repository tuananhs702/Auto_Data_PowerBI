from googleapiclient.discovery import build
from google.oauth2 import service_account
from googleapiclient.http import MediaIoBaseDownload
import os
import json
import pandas as pd

# üîπ L·∫•y credentials t·ª´ GitHub Secrets
GDRIVE_CREDENTIALS = json.loads(os.getenv("GDRIVE_CREDENTIALS"))

# üîπ K·∫øt n·ªëi v·ªõi Google Drive API
SCOPES = ['https://www.googleapis.com/auth/drive']
creds = service_account.Credentials.from_service_account_info(GDRIVE_CREDENTIALS, scopes=SCOPES)
service = build('drive', 'v3', credentials=creds)

# üîπ ID th∆∞ m·ª•c Google Drive c·∫ßn t·∫£i
FOLDER_ID = "1LyQOw0sTGUTGUxxmGZivAzB_aTBdlH6d"
SAVE_PATH = "downloads"
os.makedirs(SAVE_PATH, exist_ok=True)

# üîπ L·∫•y danh s√°ch file trong th∆∞ m·ª•c Google Drive
query = f"'{FOLDER_ID}' in parents and trashed=false"
results = service.files().list(q=query, fields="files(id, name, mimeType)").execute()
files = results.get('files', [])

if not files:
    print("‚ö†Ô∏è Kh√¥ng c√≥ file n√†o trong th∆∞ m·ª•c!")
else:
    for file in files:
        file_id = file['id']
        file_name = file['name']
        file_mime = file["mimeType"]
        file_path = os.path.join(SAVE_PATH, file_name)

        try:
            # üîπ Ki·ªÉm tra n·∫øu l√† Google Sheets -> Xu·∫•t CSV
            if file_mime == "application/vnd.google-apps.spreadsheet":
                request = service.files().export_media(fileId=file_id, mimeType="text/csv")
                file_path = file_path.rsplit(".", 1)[0] + ".csv"
            else:
                request = service.files().get_media(fileId=file_id)

            # üîπ T·∫£i file t·ª´ Google Drive
            with open(file_path, "wb") as f:
                downloader = MediaIoBaseDownload(f, request)
                done = False
                while not done:
                    status, done = downloader.next_chunk()

            print(f"‚úÖ ƒê√£ t·∫£i: {file_name} ({file_mime})")

            # üîπ N·∫øu file l√† Excel, ki·ªÉm tra ƒë·ªãnh d·∫°ng tr∆∞·ªõc khi x·ª≠ l√Ω
            if file_name.endswith(('.xls', '.xlsx')):
                try:
                    # Ki·ªÉm tra MIME type h·ª£p l·ªá
                    if file_mime not in ["application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                         "application/vnd.ms-excel"]:
                        raise ValueError("‚ö†Ô∏è File kh√¥ng ph·∫£i l√† Excel h·ª£p l·ªá!")

                    csv_path = file_path.rsplit('.', 1)[0] + ".csv"
                    df = pd.read_excel(file_path, engine="openpyxl" if file_name.endswith(".xlsx") else "xlrd")
                    df.to_csv(csv_path, index=False)
                    os.remove(file_path)  # X√≥a file g·ªëc Excel
                    print(f"üîÑ ƒê√£ chuy·ªÉn {file_name} th√†nh {os.path.basename(csv_path)}")

                    # S·∫Øp x·∫øp n·∫øu c√≥ c·ªôt Date
                    df = pd.read_csv(csv_path)
                    if "Date" in df.columns:
                        df["Date"] = pd.to_datetime(df["Date"], errors='coerce')
                        df = df.sort_values(by="Date")
                        df.to_csv(csv_path, index=False)
                        print(f"üìÖ ƒê√£ s·∫Øp x·∫øp {file_name} theo Date")

                except Exception as e:
                    print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc file {file_name}. L·ªói: {e}")

        except Exception as error:
            print(f"‚ùå L·ªói khi t·∫£i {file_name}: {error}")

print("\n‚úÖ Ho√†n th√†nh t·∫£i v√† s·∫Øp x·∫øp t·∫•t c·∫£ c√°c file CSV theo Date!")
